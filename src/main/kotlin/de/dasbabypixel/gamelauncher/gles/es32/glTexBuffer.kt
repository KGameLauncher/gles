package de.dasbabypixel.gamelauncher.gles.es32

interface glTexBuffer {
    /**
    * Name
    * ----
    * 
    * glTexBuffer — attach a buffer object's data store to a buffer texture object
    * 
    * C Specification
    * ---------------
    * 
    * | `void **glTexBuffer**(` | GLenum target, |
    * | --- | --- |
    * |   | GLenum internalFormat, |
    * |   | GLuint buffer`)`; |
    * 
    * Parameters
    * ----------
    * 
    * _`target`_
    * 
    * Specifies the target to which the texture is bound for `glTexBuffer`. Must be `GL_TEXTURE_BUFFER`.
    * 
    * _`internalFormat`_
    * 
    * Specifies the internal format of the data in the store belonging to _`buffer`_.
    * 
    * _`buffer`_
    * 
    * Specifies the name of the buffer object whose storage to attach to the active buffer texture.
    * 
    * Description
    * -----------
    * 
    * `glTexBuffer` attaches the data store of a specified buffer object to a specified texture object, and specify the storage format for the texture image found in the buffer object. The texture object must be a buffer texture.
    * 
    * If _`buffer`_ is zero, any buffer object attached to the buffer texture is detached and no new buffer object is attached. If _`buffer`_ is non-zero, it must be the name of an existing buffer object.
    * 
    * _`internalformat`_ specifies the storage format, and must be one of the following sized internal formats:
    * 
       
    * |   |   |   |   | **Component** |  |  |  |
    * | --- | --- | --- | --- | --- | --- | --- | --- |
    * | **Sized Internal Format** | **Base Type** | **Components** | **Norm** | 0 | 1 | 2 | 3 |
    * | `GL_R8` | ubyte | 1 | YES | R | 0 | 0 | 1 |
    * | `GL_R16` | ushort | 1 | YES | R | 0 | 0 | 1 |
    * | `GL_R16F` | half | 1 | NO | R | 0 | 0 | 1 |
    * | `GL_R32F` | float | 1 | NO | R | 0 | 0 | 1 |
    * | `GL_R8I` | byte | 1 | NO | R | 0 | 0 | 1 |
    * | `GL_R16I` | short | 1 | NO | R | 0 | 0 | 1 |
    * | `GL_R32I` | int | 1 | NO | R | 0 | 0 | 1 |
    * | `GL_R8UI` | ubyte | 1 | NO | R | 0 | 0 | 1 |
    * | `GL_R16UI` | ushort | 1 | NO | R | 0 | 0 | 1 |
    * | `GL_R32UI` | uint | 1 | NO | R | 0 | 0 | 1 |
    * | `GL_RG8` | ubyte | 2 | YES | R | G | 0 | 1 |
    * | `GL_RG16` | ushort | 2 | YES | R | G | 0 | 1 |
    * | `GL_RG16F` | half | 2 | NO | R | G | 0 | 1 |
    * | `GL_RG32F` | float | 2 | NO | R | G | 0 | 1 |
    * | `GL_RG8I` | byte | 2 | NO | R | G | 0 | 1 |
    * | `GL_RG16I` | short | 2 | NO | R | G | 0 | 1 |
    * | `GL_RG32I` | int | 2 | NO | R | G | 0 | 1 |
    * | `GL_RG8UI` | ubyte | 2 | NO | R | G | 0 | 1 |
    * | `GL_RG16UI` | ushort | 2 | NO | R | G | 0 | 1 |
    * | `GL_RG32UI` | uint | 2 | NO | R | G | 0 | 1 |
    * | `GL_RGB32F` | float | 3 | NO | R | G | B | 1 |
    * | `GL_RGB32I` | int | 3 | NO | R | G | B | 1 |
    * | `GL_RGB32UI` | uint | 3 | NO | R | G | B | 1 |
    * | `GL_RGBA8` | uint | 4 | YES | R | G | B | A |
    * | `GL_RGBA16` | short | 4 | YES | R | G | B | A |
    * | `GL_RGBA16F` | half | 4 | NO | R | G | B | A |
    * | `GL_RGBA32F` | float | 4 | NO | R | G | B | A |
    * | `GL_RGBA8I` | byte | 4 | NO | R | G | B | A |
    * | `GL_RGBA16I` | short | 4 | NO | R | G | B | A |
    * | `GL_RGBA32I` | int | 4 | NO | R | G | B | A |
    * | `GL_RGBA8UI` | ubyte | 4 | NO | R | G | B | A |
    * | `GL_RGBA16UI` | ushort | 4 | NO | R | G | B | A |
    * | `GL_RGBA32UI` | uint | 4 | NO | R | G | B | A |
    * 
    * When a buffer object is attached to a buffer texture, the buffer object's data store is taken as the texture's texel array. The number of texels in the buffer texture's texel array is given by $$ \\left\\lfloor { size \\over { components \\times sizeof(base\\\_type) } } \\right\\rfloor $$ where $size$ is the size of the buffer object in basic machine units (the value of `GL_BUFFER_SIZE` for _`buffer`_), and $components$ and $base\\\_type$ are the element count and base data type for elements, as specified in the table above. The number of texels in the texel array is then clamped to the value of the implementation-dependent limit `GL_MAX_TEXTURE_BUFFER_SIZE`. When a buffer texture is accessed in a shader, the results of a texel fetch are undefined if the specified texel coordinate is negative, or greater than or equal to the clamped number of texels in the texel array.
    * 
    * Errors
    * ------
    * 
    * `GL_INVALID_ENUM` is generated by `glTexBuffer` if _`target`_ is not `GL_TEXTURE_BUFFER`.
    * 
    * `GL_INVALID_ENUM` is generated if _`internalformat`_ is not one of the sized internal formats described above.
    * 
    * `GL_INVALID_OPERATION` is generated if _`buffer`_ is not zero and is not the name of an existing buffer object.
    * 
    * Associated Gets
    * ---------------
    * 
    * [glGet][de.dasbabypixel.gamelauncher.gles.es20.glGetBooleanv.glGetBooleanv] with argument `GL_MAX_TEXTURE_BUFFER_SIZE`
    * 
    * [glGet][de.dasbabypixel.gamelauncher.gles.es20.glGetBooleanv.glGetBooleanv] with argument `GL_TEXTURE_BINDING_BUFFER`
    * 
    * [glGetTexLevelParameter][de.dasbabypixel.gamelauncher.gles.es31.glGetTexLevelParameterfv.glGetTexLevelParameterfv] with argument `GL_TEXTURE_BUFFER_DATA_STORE_BINDING`
    * 
    * Version Support
    * ---------------
    * 
    * 
    * |  | **OpenGL ES API Version** |  |  |  |
    * | --- | --- | --- | --- | --- |
    * | **Function Name** | **2.0** | **3.0** | **3.1** | **3.2** |
    * | `glTexBuffer` | \- | \- | \- | ✔ |
    * 
    * See Also
    * --------
    * 
    * [glGenBuffers][de.dasbabypixel.gamelauncher.gles.es20.glGenBuffers.glGenBuffers], [glBindBuffer][de.dasbabypixel.gamelauncher.gles.es20.glBindBuffer.glBindBuffer], [glBufferData][de.dasbabypixel.gamelauncher.gles.es20.glBufferData.glBufferData], [glDeleteBuffers][de.dasbabypixel.gamelauncher.gles.es20.glDeleteBuffers.glDeleteBuffers], [glGenTextures][de.dasbabypixel.gamelauncher.gles.es20.glGenTextures.glGenTextures], [glBindTexture][de.dasbabypixel.gamelauncher.gles.es20.glBindTexture.glBindTexture], [glDeleteTextures][de.dasbabypixel.gamelauncher.gles.es20.glDeleteTextures.glDeleteTextures]
    * 
    * Copyright
    * ---------
    * 
    * Copyright © 2010-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. [https://opencontent.org/openpub/](https://opencontent.org/openpub/).
    * 
    * @see de.dasbabypixel.gamelauncher.gles.es32.glTexBuffer.glTexBuffer
    */
    fun glTexBuffer(target: Int, internalFormat: Int, buffer: UInt)
}