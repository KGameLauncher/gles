package de.dasbabypixel.gamelauncher.gles.es32

interface glDebugMessageControl {
    /**
    * Name
    * ----
    * 
    * glDebugMessageControl — control the reporting of debug messages in a debug context
    * 
    * C Specification
    * ---------------
    * 
    * | `void **glDebugMessageControl**(` | GLenum source, |
    * | --- | --- |
    * |   | GLenum type, |
    * |   | GLenum severity, |
    * |   | GLsizei count, |
    * |   | const GLuint \*ids, |
    * |   | GLboolean enabled`)`; |
    * 
    * Parameters
    * ----------
    * 
    * _`source`_
    * 
    * The source of debug messages to enable or disable.
    * 
    * _`type`_
    * 
    * The type of debug messages to enable or disable.
    * 
    * _`severity`_
    * 
    * The severity of debug messages to enable or disable.
    * 
    * _`count`_
    * 
    * The length of the array _`ids`_.
    * 
    * _`ids`_
    * 
    * The address of an array of unsigned integers contianing the ids of the messages to enable or disable.
    * 
    * _`enabled`_
    * 
    * A Boolean flag determining whether the selected messages should be enabled or disabled.
    * 
    * Description
    * -----------
    * 
    * `glDebugMessageControl` controls the reporting of debug messages generated by a debug context. The parameters _`source`_, _`type`_ and _`severity`_ form a filter to select messages from the pool of potential messages generated by the GL.
    * 
    * _`source`_ may be `GL_DEBUG_SOURCE_API`, `GL_DEBUG_SOURCE_WINDOW_SYSTEM_`, `GL_DEBUG_SOURCE_SHADER_COMPILER`, `GL_DEBUG_SOURCE_THIRD_PARTY`, `GL_DEBUG_SOURCE_APPLICATION`, `GL_DEBUG_SOURCE_OTHER` to select messages generated by usage of the GL API, the window system, the shader compiler, third party tools or libraries, explicitly by the application or by some other source, respectively. It may also take the value `GL_DONT_CARE`. If _`source`_ is not `GL_DONT_CARE` then only messages whose source matches _`source`_ will be referenced.
    * 
    * _`type`_ may be one of `GL_DEBUG_TYPE_ERROR`, `GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR`, `GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR`, `GL_DEBUG_TYPE_PORTABILITY`, `GL_DEBUG_TYPE_PERFORMANCE`, `GL_DEBUG_TYPE_MARKER`, `GL_DEBUG_TYPE_PUSH_GROUP`, `GL_DEBUG_TYPE_POP_GROUP`, or `GL_DEBUG_TYPE_OTHER` to indicate the type of messages describing GL errors, attempted use of deprecated features, triggering of undefined behavior, portability issues, performance notifications, markers, group push and pop events, and other types of messages, respectively. It may also take the value `GL_DONT_CARE`. If _`type`_ is not `GL_DONT_CARE` then only messages whose type matches _`type`_ will be referenced.
    * 
    * _`severity`_ may be one of `GL_DEBUG_SEVERITY_LOW`, `GL_DEBUG_SEVERITY_MEDIUM`, or `GL_DEBUG_SEVERITY_HIGH` to select messages of low, medium or high severity messages or to `GL_DEBUG_SEVERITY_NOTIFICATION` for notifications. It may also take the value `GL_DONT_CARE`. If _`severity`_ is not `GL_DONT_CARE` then only messages whose severity matches _`severity`_ will be referenced.
    * 
    * _`ids`_ contains a list of _`count`_ message identifiers to select specific messages from the pool of available messages. If _`count`_ is zero then the value of _`ids`_ is ignored. Otherwise, only messages appearing in this list are selected. In this case, _`source`_ and _`type`_ may not be `GL_DONT_CARE` and _`severity`_ must be `GL_DONT_CARE`.
    * 
    * If _`enabled`_ is `GL_TRUE` then messages that match the filter formed by _`source`_, _`type`_, _`severity`_ and _`ids`_ are enabled. Otherwise, those messages are disabled.
    * 
    * Notes
    * -----
    * 
    * Although debug messages may be enabled in a non-debug context, the quantity and detail of such messages may be substantially inferior to those in a debug context. In particular, a valid implementation of the debug message queue in a non-debug context may produce no messages at all.
    * 
    * `GL_DEBUG_TYPE_MARKER`, `GL_DEBUG_TYPE_PUSH_GROUP`, `GL_DEBUG_TYPE_POP_GROUP`, and `GL_DEBUG_SEVERITY_NOTIFICATION` are available only if the GL version is 4.3 or higher.
    * 
    * Errors
    * ------
    * 
    * `GL_INVALID_VALUE` is generated if _`count`_ is negative.
    * 
    * `GL_INVALID_ENUM` is generated if any of _`source`_, _`type`_ or _`severity`_ is not one of the accepted interface types.
    * 
    * `GL_INVALID_OPERATION` is generated if _`count`_ is non-zero and either _`source`_ or _`type`_ is `GL_DONT_CARE` or if _`severity`_ is not `GL_DONT_CARE`.
    * 
    * Version Support
    * ---------------
    * 
    * 
    * |  | **OpenGL ES API Version** |  |  |  |
    * | --- | --- | --- | --- | --- |
    * | **Function Name** | **2.0** | **3.0** | **3.1** | **3.2** |
    * | `glDebugMessageControl` | \- | \- | \- | ✔ |
    * 
    * See Also
    * --------
    * 
    * [glDebugMessageInsert][de.dasbabypixel.gamelauncher.gles.es32.glDebugMessageInsert.glDebugMessageInsert], [glDebugMessageCallback][de.dasbabypixel.gamelauncher.gles.es32.glDebugMessageCallback.glDebugMessageCallback], [glGetDebugMessageLog][de.dasbabypixel.gamelauncher.gles.es32.glGetDebugMessageLog.glGetDebugMessageLog].
    * 
    * Copyright
    * ---------
    * 
    * Copyright © 2013-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. [https://opencontent.org/openpub/](https://opencontent.org/openpub/).
    * 
    * @see de.dasbabypixel.gamelauncher.gles.es32.glDebugMessageControl.glDebugMessageControl
    */
    fun glDebugMessageControl(source: Int, type: Int, severity: Int, count: UInt, ids: de.dasbabypixel.gamelauncher.buffers.IntBufferRO, enabled: Boolean)
}