package de.dasbabypixel.gamelauncher.gles.es32

interface glFramebufferTexture {
    /**
    * Name
    * ----
    * 
    * glFramebufferTexture — attach a level of a texture object as a logical buffer of a framebuffer object
    * 
    * C Specification
    * ---------------
    * 
    * | `void **glFramebufferTexture**(` | GLenum target, |
    * | --- | --- |
    * |   | GLenum attachment, |
    * |   | GLuint texture, |
    * |   | GLint level`)`; |
    * 
    * Parameters
    * ----------
    * 
    * _`target`_
    * 
    * Specifies the target to which the framebuffer is bound.
    * 
    * _`attachment`_
    * 
    * Specifies the attachment point of the framebuffer.
    * 
    * _`texture`_
    * 
    * Specifies the name of an existing texture object to attach.
    * 
    * _`level`_
    * 
    * Specifies the mipmap level of the texture object to attach.
    * 
    * Description
    * -----------
    * 
    * `glFramebufferTexture` attaches a selected mipmap level or image of a texture object as one of the logical buffers of the framebuffer object bound to the specified target. Textures cannot be attached to the default draw and read framebuffer, so they are not valid targets of these commands.
    * 
    * The framebuffer object is that bound to _`target`_, which must be `GL_DRAW_FRAMEBUFFER`, `GL_READ_FRAMEBUFFER`, or `GL_FRAMEBUFFER`. `GL_FRAMEBUFFER` is equivalent to `GL_DRAW_FRAMEBUFFER`.
    * 
    * _`attachment`_ specifies the logical attachment of the framebuffer and must be `GL_COLOR_ATTACHMENT`_i_, `GL_DEPTH_ATTACHMENT`, `GL_STENCIL_ATTACHMENT` or `GL_DEPTH_STENCIL_ATTACHMENT`. _i_ in `GL_COLOR_ATTACHMENT`_i_ may range from zero to the value of `GL_MAX_COLOR_ATTACHMENTS` minus one. Attaching a level of a texture to `GL_DEPTH_STENCIL_ATTACHMENT` is equivalent to attaching that level to both the `GL_DEPTH_ATTACHMENT` _and_ the `GL_STENCIL_ATTACHMENT` attachment points simultaneously.
    * 
    * If _`texture`_ is non-zero, the specified _`level`_ of the texture object named _`texture`_ is attached to the framebuffer attachment point named by _`attachment`_.
    * 
    * If _`texture`_ is a multisampled texture, then _`level`_ must be zero.
    * 
    * If _`texture`_ is a 3D texture, then _`level`_ must be greater than or equal to zero and less than or equal to $log\_2$ of the value of `GL_MAX_3D_TEXTURE_SIZE`.
    * 
    * If _`texture`_ is a cube-mapped texture, then _`level`_ must be greater than or equal to zero and less than or equal to $log\_2$ of the value of `GL_MAX_CUBE_MAP_TEXTURE_SIZE`.
    * 
    * For all other texture types, _`level`_ must be greater than or equal to zero and less than or equal to $log\_2$ of the value of `GL_MAX_TEXTURE_SIZE`.
    * 
    * If _`texture`_ is the name of a three-dimensional, cube map array, cube map, two-dimensional array, or two-dimensional multisample array texture, the specified texture level is an array of images, and the framebuffer attachment is considered to be _layered_ and `GL_FRAMEBUFFER_ATTACHMENT_LAYERED` is set to true.
    * 
    * Errors
    * ------
    * 
    * `GL_INVALID_ENUM` is generated if _`target`_ if it is not `GL_DRAW_FRAMEBUFFER`, `GL_READ_FRAMEBUFFER`, or `GL_FRAMEBUFFER`
    * 
    * `GL_INVALID_OPERATION` is generated if zero is bound to _`target`_.
    * 
    * `GL_INVALID_ENUM` is generated if _`attachment`_ is not one of the accepted attachment points.
    * 
    * `GL_INVALID_VALUE` is generated if _`texture`_ is not zero or the name of an existing texture object.
    * 
    * `GL_INVALID_VALUE` is generated if _`texture`_ is not zero and _`level`_ is not a supported texture level for _`texture`_.
    * 
    * `GL_INVALID_OPERATION` is generated by if _`texture`_ is a buffer texture.
    * 
    * Version Support
    * ---------------
    * 
    * 
    * |  | **OpenGL ES API Version** |  |  |  |
    * | --- | --- | --- | --- | --- |
    * | **Function Name** | **2.0** | **3.0** | **3.1** | **3.2** |
    * | `glFramebufferTexture` | \- | \- | \- | ✔ |
    * 
    * See Also
    * --------
    * 
    * [glGenFramebuffers][de.dasbabypixel.gamelauncher.gles.es20.glGenFramebuffers.glGenFramebuffers], [glBindFramebuffer][de.dasbabypixel.gamelauncher.gles.es20.glBindFramebuffer.glBindFramebuffer], [glGenRenderbuffers][de.dasbabypixel.gamelauncher.gles.es20.glGenRenderbuffers.glGenRenderbuffers], [glFramebufferTextureLayer][de.dasbabypixel.gamelauncher.gles.es30.glFramebufferTextureLayer.glFramebufferTextureLayer], [glFramebufferTexture2D][de.dasbabypixel.gamelauncher.gles.es20.glFramebufferTexture2D.glFramebufferTexture2D]
    * 
    * Copyright
    * ---------
    * 
    * Copyright © 2010-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. [https://opencontent.org/openpub/](https://opencontent.org/openpub/).
    * 
    * @see de.dasbabypixel.gamelauncher.gles.es32.glFramebufferTexture.glFramebufferTexture
    */
    fun glFramebufferTexture(target: Int, attachment: Int, texture: UInt, level: Int)
}