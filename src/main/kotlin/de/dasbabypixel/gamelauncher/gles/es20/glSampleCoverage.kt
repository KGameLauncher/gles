package de.dasbabypixel.gamelauncher.gles.es20

interface glSampleCoverage {
    /**
    * Name
    * ----
    * 
    * glSampleCoverage — specify multisample coverage parameters
    * 
    * C Specification
    * ---------------
    * 
    * | `void **glSampleCoverage**(` | GLfloat value, |
    * | --- | --- |
    * |   | GLboolean invert`)`; |
    * 
    * Parameters
    * ----------
    * 
    * _`value`_
    * 
    * Specify a single floating-point sample coverage value. The value is clamped to the range 0 1 . The initial value is 1.0.
    * 
    * _`invert`_
    * 
    * Specify a single boolean value representing if the coverage masks should be inverted. `GL_TRUE` and `GL_FALSE` are accepted. The initial value is `GL_FALSE`.
    * 
    * Description
    * -----------
    * 
    * Multisampling samples a pixel multiple times at various implementation-dependent subpixel locations to generate antialiasing effects. Multisampling transparently antialiases points, lines, polygons, and images if it is enabled.
    * 
    * _`value`_ is used in constructing a temporary mask used in determining which samples will be used in resolving the final fragment color. This mask is bitwise-anded with the coverage mask generated from the multisampling computation. If the _`invert`_ flag is set, the temporary mask is inverted (all bits flipped) and then the bitwise-and is computed.
    * 
    * If an implementation does not have any multisample buffers available, or multisampling is disabled, rasterization occurs with only a single sample computing a pixel's final RGB color.
    * 
    * Provided an implementation supports multisample buffers, and multisampling is enabled, then a pixel's final color is generated by combining several samples per pixel. Each sample contains color, depth, and stencil information, allowing those operations to be performed on each sample.
    * 
    * Associated Gets
    * ---------------
    * 
    * [glGet][de.dasbabypixel.gamelauncher.gles.es20.glGetBooleanv.glGetBooleanv] with argument `GL_SAMPLE_COVERAGE_VALUE`
    * 
    * [glGet][de.dasbabypixel.gamelauncher.gles.es20.glGetBooleanv.glGetBooleanv] with argument `GL_SAMPLE_COVERAGE_INVERT`
    * 
    * [glIsEnabled][de.dasbabypixel.gamelauncher.gles.es20.glIsEnabled.glIsEnabled] with argument `GL_SAMPLE_ALPHA_TO_COVERAGE`
    * 
    * [glIsEnabled][de.dasbabypixel.gamelauncher.gles.es20.glIsEnabled.glIsEnabled] with argument `GL_SAMPLE_COVERAGE`
    * 
    * API Version Support
    * -------------------
    * 
    * 
    * |  | **OpenGL ES API Version** |  |  |  |
    * | --- | --- | --- | --- | --- |
    * | **Function Name** | **2.0** | **3.0** | **3.1** | **3.2** |
    * | glSampleCoverage | ✔ | ✔ | ✔ | ✔ |
    * 
    * See Also
    * --------
    * 
    * [glEnable][de.dasbabypixel.gamelauncher.gles.es20.glEnable.glEnable]
    * 
    * Copyright
    * ---------
    * 
    * Copyright © 1991-2006 Silicon Graphics, Inc. Copyright © 2010-2015 Khronos Group. This document is licensed under the SGI Free Software B License. For details, see [https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt](https://khronos.org/registry/OpenGL-Refpages/LICENSES/LicenseRef-FreeB.txt).
    * 
    * @see de.dasbabypixel.gamelauncher.gles.es20.glSampleCoverage.glSampleCoverage
    */
    fun glSampleCoverage(value: Float, invert: Boolean)
}