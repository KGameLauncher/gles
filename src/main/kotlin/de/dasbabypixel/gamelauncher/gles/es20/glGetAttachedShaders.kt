package de.dasbabypixel.gamelauncher.gles.es20

interface glGetAttachedShaders {
    /**
    * Name
    * ----
    * 
    * glGetAttachedShaders — Returns the handles of the shader objects attached to a program object
    * 
    * C Specification
    * ---------------
    * 
    * | `void **glGetAttachedShaders**(` | GLuint program, |
    * | --- | --- |
    * |   | GLsizei maxCount, |
    * |   | GLsizei \*count, |
    * |   | GLuint \*shaders`)`; |
    * 
    * Parameters
    * ----------
    * 
    * _`program`_
    * 
    * Specifies the program object to be queried.
    * 
    * _`maxCount`_
    * 
    * Specifies the size of the array for storing the returned object names.
    * 
    * _`count`_
    * 
    * Returns the number of names actually returned in _`shaders`_.
    * 
    * _`shaders`_
    * 
    * Specifies an array that is used to return the names of attached shader objects.
    * 
    * Description
    * -----------
    * 
    * `glGetAttachedShaders` returns the names of the shader objects attached to _`program`_. The names of shader objects that are attached to _`program`_ will be returned in _`shaders.`_ The actual number of shader names written into _`shaders`_ is returned in _`count.`_ If no shader objects are attached to _`program`_, _`count`_ is set to 0. The maximum number of shader names that may be returned in _`shaders`_ is specified by _`maxCount`_.
    * 
    * If the number of names actually returned is not required (for instance, if it has just been obtained by calling [glGetProgramiv][de.dasbabypixel.gamelauncher.gles.es20.glGetProgramiv.glGetProgramiv]), a value of `NULL` may be passed for count. If no shader objects are attached to _`program`_, a value of 0 will be returned in _`count`_. The actual number of attached shaders can be obtained by calling [glGetProgramiv][de.dasbabypixel.gamelauncher.gles.es20.glGetProgramiv.glGetProgramiv] with the value `GL_ATTACHED_SHADERS`.
    * 
    * Errors
    * ------
    * 
    * `GL_INVALID_VALUE` is generated if _`program`_ is not a value generated by OpenGL.
    * 
    * `GL_INVALID_OPERATION` is generated if _`program`_ is not a program object.
    * 
    * `GL_INVALID_VALUE` is generated if _`maxCount`_ is less than 0.
    * 
    * Associated Gets
    * ---------------
    * 
    * [glGetProgramiv][de.dasbabypixel.gamelauncher.gles.es20.glGetProgramiv.glGetProgramiv] with argument `GL_ATTACHED_SHADERS`
    * 
    * [glIsProgram][de.dasbabypixel.gamelauncher.gles.es20.glIsProgram.glIsProgram]
    * 
    * API Version Support
    * -------------------
    * 
    * 
    * |  | **OpenGL ES API Version** |  |  |  |
    * | --- | --- | --- | --- | --- |
    * | **Function Name** | **2.0** | **3.0** | **3.1** | **3.2** |
    * | glGetAttachedShaders | ✔ | ✔ | ✔ | ✔ |
    * 
    * See Also
    * --------
    * 
    * [glAttachShader][de.dasbabypixel.gamelauncher.gles.es20.glAttachShader.glAttachShader], [glDetachShader][de.dasbabypixel.gamelauncher.gles.es20.glDetachShader.glDetachShader].
    * 
    * Copyright
    * ---------
    * 
    * Copyright © 2003-2005 3Dlabs Inc. Ltd. Copyright © 2010-2015 Khronos Group. This material may be distributed subject to the terms and conditions set forth in the Open Publication License, v 1.0, 8 June 1999. [https://opencontent.org/openpub/](https://opencontent.org/openpub/).
    * 
    * @see de.dasbabypixel.gamelauncher.gles.es20.glGetAttachedShaders.glGetAttachedShaders
    */
    fun glGetAttachedShaders(program: UInt, maxCount: UInt, count: de.dasbabypixel.gamelauncher.buffers.IntBuffer, shaders: de.dasbabypixel.gamelauncher.buffers.IntBuffer)
}